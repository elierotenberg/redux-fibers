{"version":3,"sources":["../src/Fiber.js"],"names":["FIBER_NOT_STARTED","FIBER_RUNNING","FIBER_RESOLVED","FIBER_REJECTED","Fiber","run","initialState","emit","fiber","_fiberState","_listeners","promise","resolve","reject","_resolve","_reject","forEach","key","bind","getState","listener","attach","add","detach","delete","start","Error","res","then"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,gDAAoB,mBAA1B;AACA,IAAMC,wCAAgB,eAAtB;AACA,IAAMC,0CAAiB,gBAAvB;AACA,IAAMC,0CAAiB,gBAAvB;;IAEDC,K;AACJ,kBAAY,WAAYC,GAAxB,EAA+D;AAAA;;AAAA,QAAlCC,YAAkC,uEAAnBN,iBAAmB;AAAA;;AAC7D,SAAKK,GAAL,GAAW,UAACE,IAAD,EAAOC,KAAP;AAAA,aAAiBH,IAAIE,IAAJ,EAAUC,KAAV,CAAjB;AAAA,KAAX;AACA,SAAKC,WAAL,GAAmBH,YAAnB;AACA,SAAKI,UAAL,GAAkB,mBAAlB;AACA,SAAKC,OAAL,GAAe,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9C,YAAKC,QAAL,GAAgBF,OAAhB;AACA,YAAKG,OAAL,GAAeF,MAAf;AACD,KAHc,CAAf;AAIA;AACA,KAAC,UAAD,EAAa,MAAb,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkDG,OAAlD,CACE;AAAA,aAAQ,MAAKC,GAAL,IAAY,MAAKA,GAAL,EAAUC,IAAV,OAApB;AAAA,KADF;AAGD;;kBAEDC,Q,uBAAW;AACT,WAAO,KAAKV,WAAZ;AACD,G;;kBAEDF,I,mBAAc;AACZ,yBAAuB,KAAKG,UAA5B,2HAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAA7BU,QAA6B;;AACtCA;AACD;AACF,G;;kBAEDC,M,mBAAOD,Q,EAAU;AACf,SAAKV,UAAL,CAAgBY,GAAhB,CAAoBF,QAApB;AACA,WAAO,IAAP;AACD,G;;kBAEDG,M,mBAAOH,Q,EAAU;AACf,SAAKV,UAAL,CAAgBc,MAAhB,CAAuBJ,QAAvB;AACA,WAAO,IAAP;AACD,G;;kBAEKK,K;;;;;;;;;oBACA,KAAKhB,WAAL,KAAqBT,iB;;;;;oBACjB0B,MAAM,uBAAN,C;;;AAER,mBAAKjB,WAAL,GAAmBR,aAAnB;AACI0B,iB,GAAM,I;;;qBAEI,KAAKtB,GAAL,CAAS,KAAKE,IAAd,EAAoB,IAApB,C;;;AAAZoB,iB;;;;;;;;AAEA,mBAAKlB,WAAL,GAAmBN,cAAnB;AACA,gCAAQS,OAAR,GAAkBgB,IAAlB,CAAuB;AAAA,uBAAM,OAAKb,OAAL,aAAN;AAAA,eAAvB;;;;AAGF,mBAAKN,WAAL,GAAmBP,cAAnB;AACA,gCAAQU,OAAR,GAAkBgB,IAAlB,CAAuB;AAAA,uBAAM,OAAKd,QAAL,CAAca,GAAd,CAAN;AAAA,eAAvB;+CACOA,G;;;;;;;;;;;;;;;;;;;;kBAIIvB,K","file":"Fiber.js","sourcesContent":["export const FIBER_NOT_STARTED = 'FIBER_NOT_STARTED';\nexport const FIBER_RUNNING = 'FIBER_RUNNING';\nexport const FIBER_RESOLVED = 'FIBER_RESOLVED';\nexport const FIBER_REJECTED = 'FIBER_REJECTED';\n\nclass Fiber {\n  constructor(/* async */ run, initialState = FIBER_NOT_STARTED) {\n    this.run = (emit, fiber) => run(emit, fiber);\n    this._fiberState = initialState;\n    this._listeners = new Set();\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    // Bind all public methods for easier functional style\n    ['getState', 'emit', 'attach', 'detach', 'start'].forEach(\n      key => (this[key] = this[key].bind(this)),\n    );\n  }\n\n  getState() {\n    return this._fiberState;\n  }\n\n  emit(...args) {\n    for (const listener of this._listeners) {\n      listener(...args);\n    }\n  }\n\n  attach(listener) {\n    this._listeners.add(listener);\n    return this;\n  }\n\n  detach(listener) {\n    this._listeners.delete(listener);\n    return this;\n  }\n\n  async start() {\n    if (this._fiberState !== FIBER_NOT_STARTED) {\n      throw Error('Fiber already running');\n    }\n    this._fiberState = FIBER_RUNNING;\n    let res = null;\n    try {\n      res = await this.run(this.emit, this);\n    } catch (err) {\n      this._fiberState = FIBER_REJECTED;\n      Promise.resolve().then(() => this._reject(err));\n      throw err;\n    }\n    this._fiberState = FIBER_RESOLVED;\n    Promise.resolve().then(() => this._resolve(res));\n    return res;\n  }\n}\n\nexport default Fiber;\n"]}